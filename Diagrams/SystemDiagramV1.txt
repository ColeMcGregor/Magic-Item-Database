@startuml
skinparam classAttributeIconSize 0
skinparam linetype polyline


package "UI Layer" {
    class MainApp {
        +run()
    }

    class ImportScreen {
        +chooseFile()
        +selectParser()
        +startImport()
    }

    class ManualEntryScreen {
        +displayForm()
        +submitEntry()
    }

    class GeneratorScreen {
        +listGenerators()
        +runGenerator()
        +createGenerator()
    }

    class QueryScreen {
        +searchByCriteria()
        +filterResults()
    }

    class EntryDetailScreen {
        +displayEntry()
        +renderMarkdown()
        +showImage()
    }
}

package "Controllers" {
    class ImportController {
        +importFile(file)
    }

    class ManualEntryController {
        +createEntry(data)
    }

    class GeneratorController {
        +runGenerator(id)
        +createGenerator(rules)
    }

    class QueryController {
        +search(filters)
    }

    class EntryController {
        +getEntry(id)
    }
}


package "Data Models" {
    class Entry {
        +id: Int
        +title: String
        +type: String
        +rarity: String
        +price: Int
        +amount: Int
        +attunementRequired: Boolean
        +attunementCriteria: String
        +description: String
        +sourceLink: String
        +imagePath: String
    }

    class Generator {
        +id: Int
        +name: String
        +context: String
        +rules: JSON
    }

    class Inventory {
        +items: List<Entry>
        +totalValue: Int
    }
}


package "Parsing & Scraping" {
    interface ParserStrategy {
        +parse(file): List<Entry>
    }

    class CSVParser implements ParserStrategy
    class XLSXParser implements ParserStrategy

    class RedditScraper {
        +fetchDescription(link): String
        +fetchImage(link): String
    }
}

package "Storage" {
    class EntryRepository {
        +insert(entry: Entry)
        +getById(id: Int): Entry
        +search(filters): List<Entry>
    }

    class GeneratorRepository {
        +insert(generator: Generator)
        +getById(id: Int): Generator
        +listAll(): List<Generator>
    }

    class Database {
        +connect()
        +execute(query)
    }
}


package "Business Logic" {
    class GeneratorEngine {
        +buildInventory(generator: Generator): Inventory
    }

    class QueryEngine {
        +search(filters): List<Entry>
    }
}



MainApp --> ImportScreen : navigates
MainApp --> ManualEntryScreen : navigates
MainApp --> GeneratorScreen : navigates
MainApp --> QueryScreen : navigates
MainApp --> EntryDetailScreen : navigates

ImportScreen --> ImportController : invokes import
ManualEntryScreen --> ManualEntryController : submits
GeneratorScreen --> GeneratorController : manage generators
QueryScreen --> QueryController : run searches
EntryDetailScreen --> EntryController : request details

ImportController --> ParserStrategy : uses
ImportController --> RedditScraper : augments entries
ImportController --> EntryRepository : saves entries

ManualEntryController --> EntryRepository : saves entry
ManualEntryController --> RedditScraper : optional autofill

GeneratorController --> GeneratorRepository : save/load generator
GeneratorController --> GeneratorEngine : run build
GeneratorEngine --> EntryRepository : fetch entries

QueryController --> QueryEngine : runs
QueryEngine --> EntryRepository : fetch matching entries

EntryController --> EntryRepository : load entry

EntryRepository --> Database : queries
GeneratorRepository --> Database : queries

@enduml
